---
layout: post
title: "Pythonによるメタプログラミングーmetaclassについてー"
excerpt_separator: "<!--more-->"
categories:
  - non-english
tags:
  - メタプログラミング
  - metaprogramming
  - metaclass
  - python
  - メタクラス
toc: true
---
日々でPythonコードを書いています。
根拠なくコードを書くことが絶対良くないのです。
自信を持って根拠強いコードを書くとハイクオリティを保証できます。
メタプログラミングはPythonのクラスとメソッドの生成過程を制御できるので、その自信を確保できます。
今回はメタプログラミングのデザインパターンの中に強力なメタクラス（metaclass）について解説します。

<!--more-->
## メタプログラミングとは

プログラミングはコードでロジックを実装します。
メタプログラミングは**そのロジックをプログラミング**します。
つまり、**高次ロジックを制御する**ことになります。

例えば、シンプルな例ですが、プロジェクトの実行フェーズに入ると、各行を監視したいですね。
インスタンスが稼働する時にクラスのコードにロガーを追加することで、運用時の挙動を監視することができます。
しかし、例えば、毎回再起動時にクラスが再生成されるが、クラス生成過程も監視したい場合、クラスよりメタ段階で生成過程を定めてログ処理を記述することで、プロジェクトの監視が一貫で行えます。

## Python言語のメタプログラミングについて
Python言語では、メタプログラミングを行う道は主に2つあります。
一つ目は、ｍetaclassを利用することで、2つ目は、decoratorsを利用することです。

クラスはオブジェクトを生成するが、metaclassはクラスを生成します。

![](/assets/img/instance-gen.png)

属性を自動的に追加したり管理したりすることもメタプログラミングで行えます。
例えば、ロガーやデータ準備・整理・正則化などを属性としてメタクラスで追加できます。
これにより、動的クラスや動的関数を作成できます。
運用に未知のクラスを動的に生成できるので、未知物体がある場合、静的クラスのアプローチと比べるとより柔軟な対応ができます。
## metaclassについて

![](/assets/img/class-gen.png)

### `__new__`と`__init__`

### `__call__`

### `__prepare__`

## 結論

```python
class Meta(type):
  pass
```


# References

{% bibliography --file pm %}